
-- Add new columns to existing profiles table (non-breaking additions)
ALTER TABLE public.profiles ADD COLUMN IF NOT EXISTS banner_url text;
ALTER TABLE public.profiles ADD COLUMN IF NOT EXISTS location text;
ALTER TABLE public.profiles ADD COLUMN IF NOT EXISTS is_public boolean DEFAULT false;
ALTER TABLE public.profiles ADD COLUMN IF NOT EXISTS custom_theme_settings jsonb DEFAULT '{}';

-- Create social media links table
CREATE TABLE IF NOT EXISTS public.profile_social_links (
  id bigint generated by default as identity not null,
  created_at timestamp with time zone not null default now(),
  user_id uuid not null references auth.users(id) on delete cascade,
  platform text not null,
  username text not null,
  url text not null,
  is_visible boolean default true,
  sort_order integer default 0,
  constraint profile_social_links_pkey primary key (id)
);

-- Create showcase/featured items table
CREATE TABLE IF NOT EXISTS public.profile_showcase (
  id bigint generated by default as identity not null,
  created_at timestamp with time zone not null default now(),
  user_id uuid not null references auth.users(id) on delete cascade,
  item_type text not null,
  item_id text not null,
  title text not null,
  image_url text,
  sort_order integer default 0,
  constraint profile_showcase_pkey primary key (id)
);

-- Create privacy settings table
CREATE TABLE IF NOT EXISTS public.profile_privacy (
  id bigint generated by default as identity not null,
  user_id uuid not null references auth.users(id) on delete cascade,
  show_stats boolean default true,
  show_lists boolean default true,
  show_activity boolean default true,
  show_social_links boolean default true,
  show_showcase boolean default true,
  allow_discovery boolean default true,
  constraint profile_privacy_pkey primary key (id),
  constraint unique_user_privacy unique (user_id)
);

-- Enable RLS on new tables
ALTER TABLE public.profile_social_links ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.profile_showcase ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.profile_privacy ENABLE ROW LEVEL SECURITY;

-- RLS policies for profile_social_links
CREATE POLICY "Users can view their own social links" ON public.profile_social_links
  FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Users can insert their own social links" ON public.profile_social_links
  FOR INSERT WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update their own social links" ON public.profile_social_links
  FOR UPDATE USING (auth.uid() = user_id);

CREATE POLICY "Users can delete their own social links" ON public.profile_social_links
  FOR DELETE USING (auth.uid() = user_id);

-- RLS policies for profile_showcase
CREATE POLICY "Users can view their own showcase" ON public.profile_showcase
  FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Users can insert their own showcase" ON public.profile_showcase
  FOR INSERT WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update their own showcase" ON public.profile_showcase
  FOR UPDATE USING (auth.uid() = user_id);

CREATE POLICY "Users can delete their own showcase" ON public.profile_showcase
  FOR DELETE USING (auth.uid() = user_id);

-- RLS policies for profile_privacy
CREATE POLICY "Users can view their own privacy settings" ON public.profile_privacy
  FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Users can insert their own privacy settings" ON public.profile_privacy
  FOR INSERT WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update their own privacy settings" ON public.profile_privacy
  FOR UPDATE USING (auth.uid() = user_id);

CREATE POLICY "Users can delete their own privacy settings" ON public.profile_privacy
  FOR DELETE USING (auth.uid() = user_id);

-- Public viewing policies for public profiles
CREATE POLICY "Anyone can view public profile social links" ON public.profile_social_links
  FOR SELECT USING (
    is_visible = true AND 
    EXISTS (
      SELECT 1 FROM public.profiles 
      WHERE profiles.user_id = profile_social_links.user_id 
      AND profiles.is_public = true
    )
  );

CREATE POLICY "Anyone can view public profile showcase" ON public.profile_showcase
  FOR SELECT USING (
    EXISTS (
      SELECT 1 FROM public.profiles 
      WHERE profiles.user_id = profile_showcase.user_id 
      AND profiles.is_public = true
    )
  );
